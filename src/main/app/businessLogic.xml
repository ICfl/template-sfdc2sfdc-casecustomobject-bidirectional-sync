<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	version="EE-3.7.2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

    <batch:job name="syncCasesToOrgBBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>

        <batch:process-records>

            <batch:step name="getCaseInBStep" accept-expression="payload['ExtId__c'] != null">
                <enricher source="#[payload == null ? null : payload.LastModifiedDate]" target="#[payload.Case__cLastModifiedDate]" doc:name="store Case__c  LastModifiedDatein in payload">
	            	<sfdc:query-single config-ref="SalesforceB" query="SELECT LastModifiedDate FROM Case__c WHERE Id = '#[payload['ExtId__c']]'" doc:name="Query Case__c from B"/>
                </enricher>

            
            </batch:step>
            <batch:step name="upsertCaseInBStep" accept-expression="payload.Case__cLastModifiedDate == null ||  payload.Case__cLastModifiedDate &lt; payload.LastModifiedDate">
                <batch:set-record-variable variableName="accountToCreate" value="#[payload.Account]" doc:name="Set accountToCreate variable"/>
                <enricher source="#[payload]" target="#[payload.AccountId]" doc:name="store Account Id from subflow to payload">
                    <flow-ref name="checkTargetAccountSubflow" doc:name="Call checkTargetAccount"/>
                </enricher>
                <batch:set-record-variable variableName="contactToCreate" value="#[payload.Contact]" doc:name="Set contactToCreate variable"/>
                <enricher source="#[payload]" target="#[payload.ContactId]" doc:name="store Contact Id from subflow to payload">
                    <flow-ref name="checkTargetContactSubflow" doc:name="Call checkTargetContact"/>
                </enricher>

                <batch:commit size="100" doc:name="Batch Commit">
                    <dw:transform-message doc:name="Transform Case to Case__c">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	CaseId__c : $.Id,
	Status__c : $.Status,
	Subject__c : $.Subject,
	Priority__c : $.Priority,
	Description__c : $.Description,
	Origin__c : $.Origin,
	Id : $.ExtId__c,
	Account__c : $.AccountId,
	Contact__c : $.ContactId
}]]></dw:set-payload>
                    </dw:transform-message>
                    <set-variable variableName="sfdcAId" value="#[payload.get(0).CaseId__c]" doc:name="Store case A Id" doc:description="Id of A Case is stored in the CaseId__c of Case__c in B"/>


                    <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Case__c" doc:name="Upsert Case__c in B">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="A-&gt;B Case upsert result #[payload]" level="INFO" doc:name="Log result"/>
                    <dw:transform-message doc:name="Prepare Salesforce A Case for ExtId__c update">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
	Id : flowVars.sfdcAId,
	ExtId__c: payload[0].Id
}]]]></dw:set-payload>
                    </dw:transform-message>

                    <sfdc:update config-ref="SalesforceA" type="Case" doc:name="Update Salesforce A Case with ExtId__c">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:update>
                    <logger message="ExtId__c in A was updated" level="INFO" doc:name="Logger"/>
                </batch:commit>

            </batch:step>
            
           
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="Unlock processing"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
    <batch:job name="syncCasesToOrgABatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="getCaseInAStep" accept-expression="payload['CaseId__c'] != null">
                <enricher source="#[payload == null ? null : payload.LastModifiedDate]" target="#[payload.CaseLastModifiedDate]" doc:name="store Case LastModifiedDate in payload">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT LastModifiedDate FROM Case WHERE Id = '#[payload['CaseId__c']]' " doc:name="Query Case from A"/>
                </enricher>


            </batch:step>
            <batch:step name="upsertCaseInAStep" accept-expression="payload.CaseLastModifiedDate == null || payload.CaseLastModifiedDate &lt; payload.LastModifiedDate">
                <batch:set-record-variable variableName="accountToCreate" value="#[payload.Account__r]" doc:name="Prepare account variable for subflow"/>
                <enricher source="#[payload]" target="#[payload.AccountId]" doc:name="store Account Id from subflow to payload">
                    <flow-ref name="checkTargetAccountSubflow" doc:name="Call checkTargetAccount"/>
                </enricher>
                <batch:set-record-variable variableName="contactToCreate" value="#[payload.Contact__r]" doc:name="Prepare contact variable for subflow"/>
                <enricher source="#[payload]" target="#[payload.ContactId]" doc:name="store Contact Id from subflow to payload">
                    <flow-ref name="checkTargetContactSubflow" doc:name="Call checkTargetContact"/>
                </enricher>


                <batch:commit size="100" doc:name="Batch Commit">
                    <dw:transform-message doc:name="Transform Case__c To Case">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	Subject : $.Subject__c,
	Priority : $.Priority__c,
	Origin : $.Origin__c,
	Description : $.Description__c,
	ExtId__c : $.Id,
	Status : $.Status__c,
	Id : $.CaseId__c,
	AccountId : $.Account__c,
	ContactId : $.Contact__c
}]]></dw:set-payload>
                    </dw:transform-message>
                    <set-variable variableName="sfdcBId" value="#[payload.get(0).ExtId__c]" doc:name="Store Case__c B Id" doc:description="Id of B Case__c is stored in the ExtId__c of Case in A"/>

                    <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Case" doc:name="Upsert Case in A">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="B-&gt;A Case__c upsert result #[payload]" level="INFO" doc:name="Log result"/>
                    <dw:transform-message doc:name="Prepare Salesforce B Case__c for CaseId__c update">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
	Id : flowVars.sfdcBId,
	CaseId__c : payload[0].Id
}]]]></dw:set-payload>
                    </dw:transform-message>

                    <sfdc:update config-ref="SalesforceB" type="Case__c" doc:name="Update Salesforce B Case__c with CaseId__c">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:update>
                    <logger message="CaseId__c in B was updated" level="INFO" doc:name="Logger"/>
                </batch:commit>

            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="Unlock processing"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
    <sub-flow name="checkTargetAccountSubflow" >
        <choice doc:name="Check the sourceSystem and accountToCreate">
            <when expression="#[recordVars['accountToCreate'] != null &amp;&amp; 'A'.equals(flowVars['sourceSystem'])]">
                <enricher source="#[payload]" target="#[recordVars['targetAccount']]" doc:name="store Account from B in recordVar">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, NameFROM Account WHERE Name = '#[recordVars['accountToCreate'].Name]'" doc:name="Query B for Account"/>
                </enricher>
                <choice doc:name="Check the targetAccount">
                    <when expression="#[recordVars['targetAccount']]">
                        <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Account" doc:name="Insert Account in B">
                            <sfdc:objects>
                                <sfdc:object>
                                    <sfdc:inner-object key="Name">#[recordVars['accountToCreate'].Name]</sfdc:inner-object>
                                </sfdc:object>
                            </sfdc:objects>
                        </sfdc:upsert>
                        <expression-transformer expression="#[payload[0].getId()]" doc:name="Transform result to Account id"/>
                    </when>
                    <otherwise>
                        <set-payload value="#[recordVars['targetAccount'].Id]" doc:name="Set account id to payload"/>

                    </otherwise>
                </choice>
            </when>
            <when expression="#[recordVars['accountToCreate'] != null &amp;&amp; 'B'.equals(flowVars['sourceSystem'])]">
                <enricher source="#[payload]" target="#[recordVars['targetAccount']]" doc:name="store Account from A in recordVar">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name FROM Account WHERE Name = '#[recordVars['accountToCreate'].Name]'" doc:name="Query A for Account"/>
                </enricher>
                <choice doc:name="Check the targetAccount">
                    <when expression="#[recordVars['targetAccount']]">
                        <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Account" doc:name="Insert Account in A">
                            <sfdc:objects >
                                <sfdc:object>
                                    <sfdc:inner-object key="Name">#[recordVars['accountToCreate'].Name]</sfdc:inner-object>
                                </sfdc:object>
                            </sfdc:objects>
                        </sfdc:upsert>
                        <expression-transformer expression="#[payload[0].getId()]" doc:name="Transform result to Account id"/>
                    </when>
                    <otherwise>
                        <set-payload value="#[recordVars['targetAccount'].Id]" doc:name="Set account id to payload"/>

                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <set-payload value="#[null]" doc:name="Set null payload"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="checkTargetContactSubflow" >
        <choice doc:name="Check the sourceSystem and contactToCreate">
            <when expression="#[recordVars['contactToCreate'] != null &amp;&amp; 'A'.equals(flowVars['sourceSystem'])]">
                <enricher source="#[payload]" target="#[recordVars['targetContact']]" doc:name="store Contact from B in recordVar">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, FirstName, LastName, Email from Contact WHERE Email = '#[recordVars['contactToCreate'].Email]'" doc:name="Query B for Contact"/>
                </enricher>
                <choice doc:name="Check the targetContact">
                    <when expression="#[recordVars['targetContact'] == null]">
                        <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Contact" doc:name="Insert Contact in B">
                            <sfdc:objects>
                                <sfdc:object>
                                    <sfdc:inner-object key="FirstName">#[recordVars['contactToCreate'].FirstName]</sfdc:inner-object>
                                    <sfdc:inner-object key="LastName">#[recordVars['contactToCreate'].LastName]</sfdc:inner-object>
                                    <sfdc:inner-object key="Email">#[recordVars['contactToCreate'].Email]</sfdc:inner-object>
                                </sfdc:object>
                            </sfdc:objects>
                        </sfdc:upsert>
                        <expression-transformer expression="#[payload[0].getId()]" doc:name="Transform result to Contact id "/>
                        
                    </when>
                    <otherwise>
                        <set-payload value="#[recordVars['targetContact'].Id]" doc:name="Set contact id to payload"/>
                    </otherwise>
                </choice>
            </when>
            <when expression="#[recordVars['contactToCreate'] != null &amp;&amp; 'B'.equals(flowVars['sourceSystem'])]">
                <enricher source="#[payload]" target="#[recordVars['targetContact']]" doc:name="store Contact from A in recordVar">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, FirstName, LastName, Email from Contact WHERE Email = '#[recordVars['contactToCreate'].Email]'" doc:name="Query A for Contact"/>
                </enricher>
                <choice doc:name="Check the targetContact">
                    <when expression="#[recordVars['targetContact'] == null]">
                        <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Contact" doc:name="Insert Contact in A">
                            <sfdc:objects>
                                <sfdc:object>
                                    <sfdc:inner-object key="FirstName">#[recordVars['contactToCreate'].FirstName]</sfdc:inner-object>
                                    <sfdc:inner-object key="LastName">#[recordVars['contactToCreate'].LastName]</sfdc:inner-object>
                                    <sfdc:inner-object key="Email">#[recordVars['contactToCreate'].Email]</sfdc:inner-object>
                                </sfdc:object>
                            </sfdc:objects>
                        </sfdc:upsert>
                        <expression-transformer expression="#[payload[0].getId()]" doc:name="Transform result to Contact id"/>
                        
                    </when>
                    <otherwise>
                        <set-payload value="#[recordVars['targetContact'].Id]" doc:name="Set contact id to payload"/>
                    </otherwise>
                </choice>                
            </when>
            <otherwise>
                <set-payload value="#[null]" doc:name="Set null payload"/>
            </otherwise>
        </choice>
    </sub-flow>
</mule>
