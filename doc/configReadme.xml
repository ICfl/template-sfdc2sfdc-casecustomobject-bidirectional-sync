<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce Org to Org Case/Custom Object Bi-directional Sync</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to have my Cases from orgA synchronized with Custom objects from Salesforce orgB.

This Template should serve as a foundation for setting an online bi-directional sync of Cases and Custom Objects between two SalesForce instances, being able to specify filtering criteria. 

The integration main behavior is polling for changes (new Cases/Custom objects or modified ones) that have occurred in any of the Salesforce instances during a certain defined period of time. For those Cases/Custom objects that both have not been updated yet the integration triggers an upsert (update or create depending the case) taking the last modification as the one that should be applied.

Additionally, there are two subflows which are synchronizing Accounts and Contacts if the Case in orgA or Case__c custom object in orgB in manner of one time integration.
If the Account or Contact field in Case object is specified and the Account or Contact does not exist in other org, it will be created for first time.
The matching criteria for Account is field 'Account Name'. And matching criteria for Contact is field 'Email'.

Requirements have been set not only to be used as examples, but also to establish starting point to adapt the integration to any given requirements.
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made in order for all to run smoothly. **Failling to do so could lead to unexpected behavior of the template.**
]]>
		</section>
		<section id="run_it">
<![CDATA[
In order to have your application up and running you just need to complete two simple steps:

 1. [Configure the application properties](#propertiestobeconfigured)
 2. Run it! ([on premise](#runonopremise) or [in Cloudhub](#runoncloudhub))
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
In order to [create your application on CloudHub](http://www.mulesoft.org/documentation/display/current/Hello+World+on+CloudHub) you should to go to Deployment > Advanced to set all environment variables detailed in **Properties to be configured** as well as the **mule.env**. 
]]>
		</section>
		<section id="default_running_on_standalone">
<![CDATA[
Complete all properties in one of the property files, for example in [mule.dev.properties] (../master/src/main/resources/mule.dev.properties) and run your app with the corresponding environment variable to use it. To follow the example, this will be `mule.env=dev`.
]]>
		</section>
		<section id="application_configuration">
<![CDATA[
+ polling.frequency `10000`  
This are the milliseconds that will run between two different checks for updates in Salesforce

+ watermark.default.expression `2014-02-25T11:00:00.000Z`  
This property is an important one, as it configures what should be the start point of the synchronization. If the use case includes synchronizing every contact created from the begining of the times, you should use a date previous to any contact creation (perhaphs `1900-01-01T08:00:00.000Z` is a good choice). If you want to synchronize the contacts created from now on, then you should use a default value according to that requirement (for example, today is Febraury 25th of 2014 and it's eleven o'clock, then I would take the following value `2014-02-25T11:00:00.000Z`).

#### SalesForce Connector configuration for company A
+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.a.url `https://login.salesforce.com/services/Soap/u/32.0`
+ sfdc.a.integration.user.id `005d0000000yYC7AAM`

	**Note:** To find out the correct *sfdc.a.integration.user.id* value, please, refer to example project **Salesforce Data Retrieval** in [Anypoint Exchange](http://www.mulesoft.org/documentation/display/current/Anypoint+Exchange).
 

#### SalesForce Connector configuration for company B
+ sfdc.b.username `joan.baez@orgb`
+ sfdc.b.password `JoanBaez456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.b.url `https://login.salesforce.com/services/Soap/u/32.0`
+ sfdc.b.integration.user.id `005i0000002qZ75AAE`

	**Note:** To find out the correct *sfdc.b.integration.user.id* value, please, refer to example project **Salesforce Data Retrieval** in [Anypoint Exchange](http://www.mulesoft.org/documentation/display/current/Anypoint+Exchange).


### Some points to consider about configuration properties

Polling Frequency is expressed in milliseconds (different time units can be used) and the Watermark Default Expression defines the date to be used to query the first time the integration runs. [More details about polling and watermarking.](http://www.mulesoft.org/documentation/display/current/Poll+Reference)

The date format accepted in SFDC Query Language is either YYYY-MM-DDThh:mm:ss+hh:mm or you can use Constants (Like YESTERDAY in the example). [More information about Dates in SFDC.](http://www.salesforce.com/us/developer/docs/officetoolkit/Content/sforce_api_calls_soql_select_dateformats.htm)

The query fields list must include both 'Email' and 'LastModifiedDate' fields, as those fields are embedded in the integration business logic

#### Structure of the Case object

To be able to match pair Case object in orgA with Case custom object in orgB we needed to extend Case object in orgA with following field. 

+ ExtId__c `Text(50) External ID` external id which is referencing ID of Case\_\_c in orgB

Feel free to customize the name of this field, but keep in mind that you will need to update all occurrences in flows for this particular field reference.


#### Structure of the Case Custom object

In this particular template we named the Custom object `Case`, that is the API name of the Custom object in orgB is `Case__c`, so all soql queries, datamapper conversions are issued to this particular object. Case\_\_c custom object inherits all required fields from Case in orgA together with Description\_\_c, Subject\_\_c text fields and
Contact\_\_c and Account\_\_c lookup fields.

+ Account__c `Lookup(Account)`
+ CaseId__c `Text(50) External ID` external id which is referencing ID of Case in orgA
+ Contact__c `Lookup(Contact)`
+ Description__c `Text(50)`
+ Origin__c `Text(50) Required`
+ Priority__c `Text(50) Required`
+ Status__c `Text(50) Required`
+ Subject__c `Text(50)`

This structure may be customized but keep in mind that you will then need to 

+ update query `fetch case__c objects from B` in `endpoints.xml` to fetch all extra fields
+ update datamapper component `transform Case to Case__c`
+ update datamapper component `transform Case__c to Case`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
SalesForce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. User Anypoint Template calls to the API can be calculated using the formula:

***1 + UsersToSync + UsersToSync / CommitSize***

Being ***UsersToSync*** the number of Users to be synchronized on each run. 

The division by ***CommitSize*** is because by default, for each Upsert API Call, Users are gathered in groups of a number defined by the Commit Size property. Also consider that this calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you will found the inbound and outbound sides of your integration app. It is intented to define the application API.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
This file holds the functional aspect of the template , directed by one flow responsible of conducting the business logic.
]]>
		</section>
	</sections>
</configuration>